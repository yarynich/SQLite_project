//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop
#include "sqlite3.h"
#include "Unit1.h"
#include "string.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "VirtualTrees"
#pragma resource "*.dfm"

//Задаем глобальные переменные
TForm1 *Form1;
sqlite3* Database;
int status;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{

}
//---------------------------------------------------------------------------

//Кнопка удаления одной записи из таблицы и БД
void __fastcall TForm1::Button1Click(TObject *Sender)
{
sqlite3_stmt *pStatement;
//Определение выбранной ноды
PVirtualNode selectedNode = VirtualStringTree1->FocusedNode;
TBaseNode *nodeData = (TBaseNode*)VirtualStringTree1->GetNodeData(selectedNode);
//Ее индекс
int selectedNodeIndex = nodeData->index;
//Подготавливаем запрос
UnicodeString test = "DELETE FROM main WHERE id="+IntToStr(selectedNodeIndex);
wchar_t *wc = test.t_str();
char c[100];
wcstombs(c, wc, wcslen(wc)+1);
//Выполнения запроса удаления и обновления таблицы
int result = sqlite3_prepare_v2(Database,c,-1,&pStatement,NULL);
result = sqlite3_step(pStatement);
ShowMessage(IntToStr(result));
sqlite3_finalize(pStatement);
VirtualStringTree1->DeleteNode(selectedNode);

}
//---------------------------------------------------------------------------


void __fastcall TForm1::FormCreate(TObject *Sender)
{
//Проверка корректности открытия базы данных
sqlite3_open("yarynich.db", &Database);
//Задаем размер структуры данных
VirtualStringTree1->NodeDataSize = sizeof(TBaseNode);
//Загружаем БД
loadbase() ;
}


//Функция загрузки базы данных
void __fastcall TForm1::loadbase()
{
char *errmsg;
sqlite3_stmt *pStatement;
//Подготавливаем запрос
int result = sqlite3_prepare_v2(Database,"SELECT id, username, car FROM main",-1,&pStatement,NULL);
//Перебираем все записи таблицы БД
while(true)
{
//Шаг перебора
	result = sqlite3_step(pStatement);
	if(result != SQLITE_ROW) break;
//Получаем значения записей
	int n = sqlite3_column_int(pStatement, 0 /*номер столбца*/);
	unsigned char *str = (unsigned char *)sqlite3_column_text(pStatement, 1);
	unsigned char *str1 = (unsigned char *)sqlite3_column_text(pStatement, 2);
    unsigned char *str2 = (unsigned char *)sqlite3_column_text(pStatement, 3);
//При каждом проходе создаем ноды и заполняем его
	PVirtualNode entryNode = (PVirtualNode)VirtualStringTree1->AddChild(VirtualStringTree1->RootNode);
	TBaseNode *nodeData = (TBaseNode*)VirtualStringTree1->GetNodeData(entryNode);
	nodeData->index=n;
	nodeData->FirstName=(UnicodeString)(char*)str;
	nodeData->LastName=(UnicodeString)(char*)str1;
}
//Завершаем запрос
sqlite3_finalize(pStatement);
}
//---------------------------------------------------------------------------

//Функция отображения записей в VisualTreeVIew
void __fastcall TForm1::VirtualStringTree1GetText(TBaseVirtualTree *Sender, PVirtualNode Node,
          TColumnIndex Column, TVSTTextType TextType, UnicodeString &CellText)

{
TBaseNode *nodeData = (TBaseNode*)Sender->GetNodeData(Node);
switch(Column)
{
	case 0: CellText = nodeData->index; break;
	case 1: CellText = nodeData->FirstName; break;
	case 2: CellText = nodeData->LastName; break;
}
}
//---------------------------------------------------------------------------

//Функция показа дополнительной инфомрации при нажатии на запись в Label
void __fastcall TForm1::VirtualStringTree1AddToSelection(TBaseVirtualTree *Sender,
		  PVirtualNode Node)
{
sqlite3_stmt *pStatement;
if(!Node) return;

TBaseNode *nodeData = (TBaseNode*)Sender->GetNodeData(Node);

/////Постановка запроса/////
UnicodeString test = "SELECT count  FROM main WHERE id="+IntToStr(nodeData->index);
wchar_t *wc = test.t_str();
char c[100];
wcstombs(c, wc, wcslen(wc)+1);
/////////////////////////////
//Получаем значения записей
int result = sqlite3_prepare_v2(Database,c,-1,&pStatement,NULL);
result = sqlite3_step(pStatement);
unsigned char *str = (unsigned char *)sqlite3_column_text(pStatement, 0);
unsigned char *str1 = (unsigned char *)sqlite3_column_text(pStatement, 1);
unsigned char *str2 = (unsigned char *)sqlite3_column_text(pStatement, 2);
//Заполяем значение Label
Label1->Caption = "Объем бака: "+(UnicodeString)(char*)str;
sqlite3_finalize(pStatement);
}
//---------------------------------------------------------------------------
//Функция закрытия формы и закрытия БД
void __fastcall TForm1::FormClose(TObject *Sender, TCloseAction &Action)
{
sqlite3_close(Database);
}
//---------------------------------------------------------------------------

//Кнопка удаления всех записей из таблицы и БД, аналогичная удалению одной записи, но изменен запрос
void __fastcall TForm1::Button2Click(TObject *Sender)
{
sqlite3_stmt *pStatement;
const char* c = "DELETE FROM customers";
/////////////////////////////
int result = sqlite3_prepare_v2(Database,c,-1,&pStatement,NULL);
result = sqlite3_step(pStatement);
sqlite3_finalize(pStatement);
VirtualStringTree1->Clear();
Label1->Caption ="База была очищена";
}
//---------------------------------------------------------------------------

